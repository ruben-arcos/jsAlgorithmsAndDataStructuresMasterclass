Singly Linked Lists

Objectives
● Define what a Singly Linked List is
● Compare and contrast Linked
    Lists with arrays
● Implement insertion, removal and
    traversal methods on Singly 
    Linked Lists

What is a linked list?
● No indices
● A data structure that contains a HEAD, TAIL and LENGTH property
● Linked Lists consist of nodes, and each NODE has a VALUE and a 
    POINTER  to another node or null. I

HEAD                      LENGTH = 4                      TAIL
    ⏐⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⏐
   4️⃣       -----→      6️⃣      -----→       8️⃣      -----→      2️⃣  ----→              
             NEXT               NEXT                NEXT          NULL  

● A linked list comprises nodes, each with a VALUE (data) and a 
   NEXT POINTER pointing to the next node in the sequence.
● The HEAD points to the first node, the TAIL points to the last 
   node, and the LENGTH property indicates the number of 
   nodes.
●There are no indices; to access an element, you start at the 
   HEAD and traverse the list by following the NEXT pointers 
   until you reach the desired node or null.
● Think of it like a building with no elevators; to move between 
   floors, you take the stairs. Similarly, to access elements in a 
   linked list, you traverse from the beginning.

Comparisons with Arrays

Lists
● Do not have indexes
● Connected via nodes with a NEXT pointer 
● Random access is not allowed

Arrays
● Indexed in order
● Insertion and deletion can be expensive
● Can quickly be accessed at a specific index

What is traverse?
● In the context of linked lists or other data structures, "traversing" 
   refers to the process of moving through the elements (nodes) 
   of the structure.
● This movement is typically done one by one, either for 
   examination, processing, or retrieval of specific information.
● In the case of a linked list, traversing means moving from one 
   node to the next.
● The process starts from the beginning (head) of the linked list and 
   progresses until a certain condition is met.
● The traversal process involves visiting each node sequentially.
● The goal is to perform some operation or locate a specific node 
   during this sequential visitation.ess involves visiting each node 
   sequentially in order to perform some operation or locate a specific 
   node.

Example:

   traverse() {
      // Initializes a variable current to the head of the linked list, which is the starting point for traversal
      let current = this.head;

      // Initiates a while loop that continues as long as current is not null. This ensures that the loop iterates through each node in the linked list.
      while(current) {
         // Prints the value (or data) of the current node.
         console.log(current.val);
         // Moves to the next node in the linked list by updating the current variable to point to the next node.
         current = current.next;
      }
   }

Big O of Singly Linked Lists --> excels at insertion and removal compared to arrays

  Insertion: 
   ● At the beginning: O(1) - This is because you can add a new node at the 
      beginning by updating the next pointer of  the new node to point to the current 
      head and then updating the head to the new node.
      
   ● Insertion (at the end): O(N) - This is because to insert at the end, you need to 
      traverse the entire list to find the last node, and then insert the new node after it.

   Removal:
   ● At the beginning: O(1) - Similar to insertion, you can remove the first node by 
      updating the head pointer to the next node.

   Removal 
   ● At the end: O(N) - To remove the last node, you need to traverse the list to find 
      the second-to-last node and update its next pointer to null.

   Searching: 
   ● O(N) - You might need to traverse the entire list in the worst case to find a 
      specific element.

   Access: 
   ● O(N) - Similar to searching, you may need to traverse the list to access a 
      specific element.

RECAP
● Singly Linked Lists are an excellent alternative to arrays when insertion and deletion 
   at the beginning are frequently required
● Arrays contain a built in index whereas Linked Lists do not
● The idea of a list data structure that consists of nodes is the doundation for other data 
   structures like Stacks and Queues