Insertion Sort

    Builds up the sort by gradually creating a larger left half which is always sorted.
    In other words, we are taking an element one at a time and inserting it in the correct spot

    Example:

    // Initial unsorted array
    [5️⃣, ③, 4, 1, 2]

    // Take the first element (3️⃣) and insert it in the correct spot in the sorted section
    [3️⃣,5️⃣, ④, 1, 2]

    // Take the next element (④) and insert it in the correct spot in the sorted section
    [3️⃣, 4️⃣, 5️⃣, ①, 2]

    // Take the next element (①) and insert it in the correct spot in the sorted section
    [1️⃣, 3️⃣, 4️⃣, 5️⃣, ②]

    // Take the final element (②) and insert it in the correct spot in the sorted section
    [1️⃣, 2️⃣, 3️⃣, 4️⃣, 5️⃣]

    1. Insertion sort time complexity is O(n²): 
        * Where 'n' is the number of elements in the array. The algorithm has nested loops, which can result in quadratic time complexity.
    
    2. Insertion sort only good for:
        * Nearly sorted data: Insertion sort performs well when the data is already partially sorted. In such cases, it can have a linear time complexity, making it more efficient compared to its worst-case time complexity.

        * When data is coming in live or streaming: Insertion sort can be useful in scenarios where data is received incrementally, and you need to insert new elements into a sorted structure quickly. Its adaptive nature can be advantageous in such situations.


