Doubly Linked Lists

●Still a length list. There is no indexing
● Basically, all that we do is add a pointer to the previous node 
   and the next node so each node points in two directions.
● ALMOST identical to Singly Linked List, except every node 
   has ANOTHER pointer, to the PREVIOUS node

                 ⎯ ⎯ ⎯ ⎯ ⎯ ⎯ ⎯ ⎯ ⎯ ⎯ ⎯  ⎯ ⎯ 
                ⏐       next            next           next        ⏐
    <----- 1️⃣2️⃣  <----->  9️⃣  <----->  5️⃣  <----->  1️⃣4️⃣ ----->
        null           prev           prev           prev              null


Objectives:
● Construct a Doubly Linked List
● Compare and contrast Doubly and Singly Linked Lists
● Implement basic operations on a Doubly Linked List

Comparisons wirh Singly Linked Lists
More flexibility === More memory

Setting up the node class

    Node
    - val
    - next
    - prev

    DoublyLinkedList
    - head
    - tail
    - length

    class Node{
        constructor(val) {
            this.val = val;
            this.next = null;
            this.prev = null;
        }
    }

    class DoublyLinkedList{
        constructor() {
            this.head = null;
            this.tail = null;
            this.length = 0;
        }
    }

Big O of Doubly Linked Lists

    Insertion: 
    ● In a doubly linked list, insertion at the beginning or end of the list is indeed O(1) because you
        have direct access to the head and tail nodes. However, insertion in the middle of the list requires traversing to the desired position, which makes it O(N), not O(1) in all cases.

    Removal:
    ● Removal from the beginning or end of the list is O(1) for the same reason as insertion. Removal
       from the middle of the list also requires traversing to the specific node, so it's O(N) in that case.
       
    Searching:
    ● Searching in a doubly linked list involves traversing the list from either the head or tail node
       until the target node is found. As a result, searching is O(N), where N is the number of nodes in the list. The factor of 1/2 doesn't affect the overall time complexity analysis, so it's still O(N).
        
        *** Technically searching is O(N/2), but thats still O(N)

    Access:
    ● Accessing an element by index in a doubly linked list requires traversing from either the head or
       tail node until the desired index is reached. Since this traversal may need to cover the entire list in the worst case, access in a doubly linked list is O(N).

RECAP
● Doubly Linked Lists are almost identical to Singly Linked Lists except there is an additional pointer
    to previous nodes
● Better than Singly Linked Lists for finding nodes and can be done in half the time!
● However, they do take up more memory considering the extra pointer
