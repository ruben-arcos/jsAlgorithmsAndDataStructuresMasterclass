Data Structures
    - What they have in common is that they are collections of values.

    What do they do?
    Data Structures are collections of values, the relationships among them, 
    and the functions or operations that can be applied to the data

    Why so many?
    Different data structures excel at different things. some are highly 
    specialized, while others (like arrays) are more generaly used

    Why care?
    The more time you spend as a developer, the more likely you'll need to 
    use one of these data structures


ES2015 Class Syntax Overview

What is a class?
A blueprint for creating objects with pre-defined properties and methods

JavaScript does not have classes because. JavaScript has never really 
been truly object oriented and it takes advantage of something called 
prototype based inheritance or prototypal

The Syntax:

    class Student { // start with capital letter
        constructor (firstName, lastName, year) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.grade = grade;
        }
    }

    let firstStudent = new Student('Ruben', 'Arcos', 90);
    let secondStudent = new Student('Jack', 'Wood', 90);
    let grade = new Student()

The method to create new objects must be called constructor
The class keyword creates a constant, so you can not redifine it.
Watch out for the syntax as well!

Instance Methods â†’ will be used more

    class Student { // start with capital letter
            constructor (firstName, lastName) {
                this.firstName = firstName;
                this.lastName = lastName;
                this.tardies = 0;
                this.scores = [];
            }
            // Instance methods
            fullName() {
                return `Your full name is ${this.firstName} ${this.lastName}`
            }
            markLate() {
                this.tardies += 1
                if (this.tardies >= 3) {
                    return 'You are expelled'
                }
                return `${this.firstName} ${this.lastName} has been late ${this.tardies} times`
            }
            addScore(score) {
                this.score.push(score) 
                return this.scores
            }
            calculateAverage() {
                let sum = this.scores.reduce(function (a,b) {return a+b;})
                return sum / this.scores.length
            }
            }

        let firstStudent = new Student('Ruben', 'Arcos', 90);
        let secondStudent = new Student('Jack', 'Wood', 90);

        firstStudent.fullName() // 'Your full name is Ruben Arcos';
        secondStudent.fullName() // 'Your full name is Jack Wood';

        firstStudent.markLate() // 'Ruben Arcos has been late 1 times'

        secondStudent.addScore(98)
        secondStudent.addScore(76)

        secondStudent.calculateAverage() // 87

        secondStudent.addScore(100)

        secondStudent.calculateAverage() // 91.33333333333333

        