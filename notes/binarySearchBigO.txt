What about big O

O(log n)                                           O(1)
worst and average case                  best case

Suppose we're searching for 13
[2,3,5,9,11,14,15,19,21,25,28,30,50,52,60,63]
[0,1,2,3, 4,  5,  6,  7,  8,  9,10,11,12,13,14,15]
[2,3,5,9,11,14,15,19]
[11,14,15]
[11]

13 IS NOT HERE
16 elements = 4 'steps'

To add another 'step', we need to double the number of elements
Lets search for 32

[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35]
[17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,35]
[25,26,27,28,29,30,32,35]
[29,30,32,35]
[32,35]
[32]

32 elements = 5 'steps' (worst case)
That relationship is log base two, so if
N is 16 or 2^4
N is 32 2^5

Every time we double the size of N, we are simply adding one extra step.
So, log n is really good

**Remember, that the caveat of binary search is that it only works on a sorted array and if you don't have sort data then linear search must be used
